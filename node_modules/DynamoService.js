exports.DynamoService = class DynamoService {


    putMeta(type,structure,currentIndex,nextIndex,status,callback) {

        let metaTable = this.metaTable;

        let params = {
            Item: {
                "type" : { S: type },
                "structure" : { S: structure },
                "currentIndex" : { S: currentIndex },
                "nextIndex" : { S: nextIndex },
                "status" : { S: status }
            },
            TableName: metaTable,
            ReturnConsumedCapacity: "TOTAL",
            ReturnValues: "ALL_OLD"
        };


        // noinspection JSUnresolvedVariable,JSUnresolvedFunction
        this.dynamoDB.putItem(params, function(err, data) {
            if (err) {
                console.log('ERROR UPDATING ' + metaTable + ':', err);
                if (callback !== null) callback(err,null);
            }
            else {
                console.log('SUCESSFULY UPDATED ' + metaTable + ':', params.Item , data);
                if (callback !== null) callback(null,params.Item);
            }
        });

    }


    getMeta(docType, callback) {

        let metaTable = this.metaTable;
        let params = {
            TableName: metaTable,
            Key: {
                'type' : {S: docType},
            }
        };

        this.dynamoDB.getItem(params, function(err, data) {
            if (err) {
                callback(err,null);
            } else {
                let meta = data.Item || null;
                let item = typeof data.Item !== 'undefined' ? {
                    type : typeof meta['type'] !== 'undefined' ? meta['type']['S'] : '',
                    structure : typeof meta['structure'] !== 'undefined' ? meta['structure']['S'] : '',
                    currentIndex: typeof meta['currentIndex'] !== 'undefined' ? meta['currentIndex']['S'] : '',
                    nextIndex : typeof meta['nextIndex'] !== 'undefined' ? meta['nextIndex']['S'] : '',
                    status: typeof meta['status'] !== 'undefined' ? meta['status']['S'] : ''
                } : null;

                callback(null,item);
            }
        });
    }



    getAllData(docType, paginationCallback) {

        let params = {
            "TableName": this.dataTable,
            "FilterExpression": "#type = :type",
            "ExpressionAttributeNames" : {
                "#type" : "type"
            },
            "ExpressionAttributeValues": {
                ":type" : docType
            }
        };

        // noinspection JSUnresolvedFunction
        let dynamo = new this.aws.DynamoDB.DocumentClient({apiVersion: '2012-08-10'});

        let onQuery = function(err,data) {

            if (typeof data.LastEvaluatedKey === "undefined") {
                data.finished = true;
            }

            paginationCallback(err, data);

            // noinspection JSUnresolvedVariable
            if (typeof data.LastEvaluatedKey !== "undefined") {
                // noinspection JSUnresolvedVariable
                params.ExclusiveStartKey = data.LastEvaluatedKey;
                // noinspection JSUnresolvedFunction
                dynamo.scan(params, onQuery); //continue for more, scan limits it to 1MG at a time
            }
        };

        // noinspection JSUnresolvedFunction
        dynamo.scan(params,onQuery);

    }

    constructor(awsInstance, metaTable, dataTable) {
        // noinspection JSUnusedGlobalSymbols
        this.dynamoDB = new awsInstance.DynamoDB({apiVersion: '2012-08-10'});
        this.metaTable = metaTable;
        this.dataTable = dataTable;
        this.aws = awsInstance;
    }

};